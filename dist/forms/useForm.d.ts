import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { RequestPayload, VisitParams } from "./types";
export declare function isFormData(payload: RequestPayload): payload is FormData;
export default function useForm<Args extends RequestPayload, S extends VisitParams, R extends AxiosRequestConfig>(args?: Args, formOptions?: S, requestOptions?: R): {
    submit: (requestOptions?: AxiosRequestConfig, options?: VisitParams) => Promise<AxiosResponse<any, any>>;
    data: Args;
    errors: {};
    response: Partial<AxiosResponse<any, any>>;
    hasErrors: boolean;
    processing: boolean;
    progress: null;
    wasSuccessful: boolean;
    recentlySuccessful: boolean;
    isDirty: boolean;
    setOptions(options?: any): void;
    setRequestOptions(options?: any): void;
    setData(key: string | Args | ((data: any) => Args), value?: any): void;
    getData(key: string, defaultValue?: any): any;
    transform(callback: any): void;
    setDefaults(key: any, value: any): void;
    reset(...fields: any): void;
    setError(key: any, value: any): void;
    clearErrors(...fields: any): void;
    bindField(name: string, defaultValue?: any): {
        name: string;
        value: any;
        onChange: (value: any) => void;
    };
    get(requestOptions?: Partial<AxiosRequestConfig>, options?: Partial<VisitParams>): Promise<AxiosResponse<any, any>>;
    post(requestOptions?: Partial<AxiosRequestConfig>, options?: Partial<VisitParams>): Promise<AxiosResponse<any, any>>;
    put(requestOptions?: Partial<AxiosRequestConfig>, options?: Partial<VisitParams>): Promise<AxiosResponse<any, any>>;
    patch(requestOptions?: Partial<AxiosRequestConfig>, options?: Partial<VisitParams>): Promise<AxiosResponse<any, any>>;
    delete(requestOptions?: Partial<AxiosRequestConfig>, options?: Partial<VisitParams>): Promise<AxiosResponse<any, any>>;
};
