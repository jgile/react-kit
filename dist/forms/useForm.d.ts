import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Method, RequestPayload, VisitParams } from "./types";
export declare function isFormData(payload: RequestPayload): payload is FormData;
export default function useForm<Args extends RequestPayload, S extends VisitParams, R extends AxiosRequestConfig>(args?: Args, options?: S, requestOptions?: R): {
    submit: (method: Method, href: string | URL, options?: VisitParams, requestOptions?: AxiosRequestConfig) => Promise<AxiosResponse<any, any>>;
    data: Args;
    errors: {};
    response: {};
    hasErrors: boolean;
    processing: boolean;
    progress: null;
    wasSuccessful: boolean;
    recentlySuccessful: boolean;
    isDirty: boolean;
    setOptions(options?: any): void;
    setRequestOptions(options?: any): void;
    setData(key: string | Args | ((data: any) => Args), value?: any): void;
    transform(callback: any): void;
    setDefaults(key: any, value: any): void;
    reset(...fields: any): void;
    setError(key: any, value: any): void;
    clearErrors(...fields: any): void;
    get(url: any, options?: any, requestOptions?: any): Promise<AxiosResponse<any, any>>;
    post(url: any, options?: any, requestOptions?: any): Promise<AxiosResponse<any, any>>;
    put(url: any, options?: any, requestOptions?: any): Promise<AxiosResponse<any, any>>;
    patch(url: any, options?: any, requestOptions?: any): Promise<AxiosResponse<any, any>>;
    delete(url: any, options?: any, requestOptions?: any): Promise<AxiosResponse<any, any>>;
};
